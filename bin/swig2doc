#! /usr/bin/ruby
#
#  SWIG2DOC
#
#  Convert SWIG+Doxygen output to documentation
#
#  Copyright (C) 2010 Pjotr Prins <pjotr.prins@thebird.nl> 
#

srcpath=File.dirname(File.dirname(__FILE__))
libpath=File.dirname(srcpath)+'/lib'
$: << libpath

require 'optparse'
require 'ostruct'
require 'rubygems'
require 'config/defaultconfig'

defaultconfig = DefaultConfig.new(srcpath+'/etc/default.yaml')

print defaultconfig.copyright_msg+"\n"

usage = <<USAGE

    Convert SWIG+Doxygen XML to some form of documentation. By default this is
    POD for Perl, rdoc for Ruby. Other switches allow textual, HTML and LaTeX
    output. Multiple outputs can be specified. For more information see
    http://biolib.open-bio.org/

    #{defaultconfig.copyright}
        
    Use --help for more information

USAGE

print(usage) if ARGV.size == 0

$options = OpenStruct.new()
$options.outdir = './output'
Dir.mkdir($options.outdir) if !File.directory?($options.outdir)

opts = OptionParser.new do |opts|
  opts.on("--auto", "generate native language output (POD for Perl, others nyi)") do | b |
    $options.output_auto = true
  end
  opts.on("--text", "generate plain text output") do | b |
    $options.output_text = true
  end
  opts.on("--html", "generate HTML output (nyi)") do | b |
    $options.output_html = true
  end
  opts.on("--latex", "generate LaTeX output (nyi)") do | b |
    $options.output_latex = true
  end


  opts.on_tail("-h", "--help", "Print this help") {
    print(usage)
    print(opts)
    print <<EXAMPLE
    
Examples:

    Generate Perl POD (this is Perl input):

    ./bin/swig2doc test/data/doxygen/xml/affyio/biolib__affyio_8c.xml test/data/doxygen/xml/affyio/biolib__affyio_8h.xml test/data/swig/perl_affyio_wrap.xml

    Generate Textual output in ./output/txt:

    ./bin/swig2doc --text test/data/doxygen/xml/affyio/biolib__affyio_8c.xml test/data/doxygen/xml/affyio/biolib__affyio_8h.xml test/data/swig/perl_affyio_wrap.xml
    
EXAMPLE
    exit()
  }
end
opts.parse!(ARGV)

$options.output_auto = true if !$options.output_latex and !$options.output_text and !$options.output_html

exit(1) if ARGV.size == 0

require 'sourcetree'
require 'input/parserfactory'
require 'output/textwriter'
require 'output/htmlwriter'

tree = SourceTree.new(defaultconfig)

ARGV.each do | fn |
  parser = ParserFactory.new(fn)
  tree.add(parser.type, parser.cobjs)
end

tree.analyse

if $options.output_text
  TextWriter.new(tree).write($options.outdir+'/txt')
end

if $options.output_html
  HtmlWriter.new(tree).write($options.outdir+'/html')
end

if $options.output_latex
  $stderr.print "LaTeX output not yet implemented!"
end

if $options.output_auto
  $stderr.print "Native formats not yet implemented!"
end


